Index: proj_maths/terms_work.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"Модуль работы с терминами\"\"\"\nimport csv\n\ndef get_terms_for_table():\n    \"\"\"Функция возвращает список терминов\"\"\"\n    terms = []\n    with open(\"./data/terms.csv\", \"r\", encoding=\"utf-8\") as f:\n        cnt = 1\n        for line in f.readlines()[1:]:\n            term, definition, source = line.split(\";\")\n            terms.append([cnt, term, definition])\n            cnt += 1\n    return terms\n\n\ndef write_term(new_term, new_definition):\n    \"\"\"Функция записи новых терминов\"\"\"\n    new_term_line = f\"{new_term};{new_definition};user\"\n    with open(\"./data/terms.csv\", \"r\", encoding=\"utf-8\") as f:\n        existing_terms = [l.strip(\"\\n\") for l in f.readlines()]\n        title = existing_terms[0]\n        old_terms = existing_terms[1:]\n    terms_sorted = old_terms + [new_term_line]\n    terms_sorted.sort()\n    new_terms = [title] + terms_sorted\n    with open(\"./data/terms.csv\", \"w\", encoding=\"utf-8\") as f:\n        f.write(\"\\n\".join(new_terms))\n\ndef write_translate(new_term1, new_definition1):\n    \"\"\"Функция записи новых переводов - сделана как копия из функции записи, писала в файл terms. Попытка сделать второй файл базы данных не получилась\"\"\"\n    new_term1_line = f\"{new_term1};{new_definition1};user\"\n    with open(\"./data/translate.csv\", \"r\", encoding=\"utf-8\") as f:\n        existing_terms = [l.strip(\"\\n\") for l in f.readlines()]\n        title = existing_terms[0]\n        old_terms = existing_terms[1:]\n    terms_sorted = old_terms + [new_term1_line]\n    terms_sorted.sort()\n    new_terms = [title] + terms_sorted\n    with open(\"./data/translate.csv\", \"w\", encoding=\"utf-8\") as f:\n        f.write(\"\\n\".join(new_terms))\n\n\ndef get_terms_stats():\n    \"\"\"Функция расчета статистики терминов,\n    имеющихся в базе данных\n    \"\"\"\n    db_terms = 0\n    user_terms = 0\n    defin_len = []\n    with open(\"./data/terms.csv\", \"r\", encoding=\"utf-8\") as f:\n        for line in f.readlines()[1:]:\n            term, defin, added_by = line.split(\";\")\n            words = defin.split()\n            defin_len.append(len(words))\n            if \"user\" in added_by:\n                user_terms += 1\n            elif \"db\" in added_by:\n                db_terms += 1\n    stats = {\n        \"terms_all\": db_terms + user_terms,\n        \"terms_own\": db_terms,\n        \"terms_added\": user_terms,\n        \"words_avg\": sum(defin_len)/len(defin_len),\n        \"words_max\": max(defin_len),\n        \"words_min\": min(defin_len)\n    }\n    return stats\n\n\ndef delete_term_from_csv(term_id):\n    # Открываем файл и читаем его содержимое\n    with open('terms.csv', 'r') as file:\n        reader = csv.DictReader(file)\n        data = list(reader)\n\n    # Находим строку, которую нужно удалить\n    for i, row in enumerate(data):\n        if row['id'] == str(term_id):\n            del data[i]\n            break\n\n    # Записываем обновленные данные обратно в файл\n    with open('terms.csv', 'w', newline='') as file:\n        fieldnames = data[0].keys()\n        writer = csv.DictWriter(file, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(data)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/proj_maths/terms_work.py b/proj_maths/terms_work.py
--- a/proj_maths/terms_work.py	(revision 3b6dc7336814f0530c57aac85207c11c93fc3c1a)
+++ b/proj_maths/terms_work.py	(date 1715283697254)
@@ -1,6 +1,36 @@
 """Модуль работы с терминами"""
 import csv
 
+
+def delete_term_from_csv(term):
+    # Открываем файл и читаем его содержимое
+    with open('./data/terms.csv', 'r', encoding="utf-8") as file:
+        reader = csv.DictReader(file)
+        data = list(reader)
+        print(data)
+
+        # Находим строку, которую нужно удалить
+        for i, row in enumerate(data):
+            if row[0] == term:
+                deleted_term = row
+                del data[i]
+                print(f"Deleted term: {', '.join(deleted_term)}")
+                break
+        else:
+            print(f"Term '{term}' not found.")
+            return
+
+        # Записываем обновленные данные обратно в файл
+        with open('terms.csv', 'w', newline='') as file:
+            writer = csv.writer(file)
+            writer.writerows(data)
+        print("Data updated successfully.")
+        return data
+    except Exception as e:
+    print(f"Error occurred: {e}")
+    return None
+
+
 def get_terms_for_table():
     """Функция возвращает список терминов"""
     terms = []
@@ -13,6 +43,7 @@
     return terms
 
 
+
 def write_term(new_term, new_definition):
     """Функция записи новых терминов"""
     new_term_line = f"{new_term};{new_definition};user"
@@ -26,6 +57,7 @@
     with open("./data/terms.csv", "w", encoding="utf-8") as f:
         f.write("\n".join(new_terms))
 
+
 def write_translate(new_term1, new_definition1):
     """Функция записи новых переводов - сделана как копия из функции записи, писала в файл terms. Попытка сделать второй файл базы данных не получилась"""
     new_term1_line = f"{new_term1};{new_definition1};user"
@@ -60,28 +92,8 @@
         "terms_all": db_terms + user_terms,
         "terms_own": db_terms,
         "terms_added": user_terms,
-        "words_avg": sum(defin_len)/len(defin_len),
+        "words_avg": sum(defin_len) / len(defin_len),
         "words_max": max(defin_len),
         "words_min": min(defin_len)
     }
     return stats
-
-
-def delete_term_from_csv(term_id):
-    # Открываем файл и читаем его содержимое
-    with open('terms.csv', 'r') as file:
-        reader = csv.DictReader(file)
-        data = list(reader)
-
-    # Находим строку, которую нужно удалить
-    for i, row in enumerate(data):
-        if row['id'] == str(term_id):
-            del data[i]
-            break
-
-    # Записываем обновленные данные обратно в файл
-    with open('terms.csv', 'w', newline='') as file:
-        fieldnames = data[0].keys()
-        writer = csv.DictWriter(file, fieldnames=fieldnames)
-        writer.writeheader()
-        writer.writerows(data)
Index: proj_maths/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"proj_maths URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index),\n    path('terms-list', views.terms_list),\n    path('add-term', views.add_term),\n    path('send-term', views.send_term),\n    path('stats', views.show_stats),\n    path('add-translate', views.add_translate),\n    path('delete/<int:term_id>/', views.term_delete, name='term_delete'),\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/proj_maths/urls.py b/proj_maths/urls.py
--- a/proj_maths/urls.py	(revision 3b6dc7336814f0530c57aac85207c11c93fc3c1a)
+++ b/proj_maths/urls.py	(date 1715284042190)
@@ -15,7 +15,7 @@
 """
 from django.contrib import admin
 from django.urls import path
-from . import views
+from proj_maths import views
 
 urlpatterns = [
     path('', views.index),
@@ -24,5 +24,5 @@
     path('send-term', views.send_term),
     path('stats', views.show_stats),
     path('add-translate', views.add_translate),
-    path('delete/<int:term_id>/', views.term_delete, name='term_delete'),
+    path('delete/Uniform Resource Locator>/', views.term_delete),
 ]
Index: proj_maths/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\nfrom django.core.cache import cache\nfrom . import terms_work\n\nfrom django.shortcuts import redirect\n\n\n\ndef term_delete(request, term_id):\n    delete_term_from_csv(term_id)\n    return redirect('term_list')\n\n\n\n\ndef index(request):\n    return render(request, \"index.html\")\n\n\ndef terms_list(request):\n    terms = terms_work.get_terms_for_table()\n    return render(request, \"term_list.html\", context={\"terms\": terms})\n    return render(request, \"term_list.html\", context={\"terms\": terms})\n\n\ndef add_term(request):\n    return render(request, \"term_add.html\")\n\n\ndef add_translate(request):\n    return render(request, \"translate_add.html\")\n\n\ndef send_term(request):\n    if request.method == \"POST\":\n        cache.clear()\n        user_name = request.POST.get(\"name\")\n        new_term = request.POST.get(\"new_term\", \"\")\n        new_definition = request.POST.get(\"new_definition\", \"\").replace(\";\", \",\")\n        context = {\"user\": user_name}\n        if len(new_definition) == 0:\n            context[\"success\"] = False\n            context[\"comment\"] = \"Описание должно быть не пустым\"\n        elif len(new_term) == 0:\n            context[\"success\"] = False\n            context[\"comment\"] = \"Термин должен быть не пустым\"\n        else:\n            context[\"success\"] = True\n            context[\"comment\"] = \"Ваш термин принят\"\n            terms_work.write_term(new_term, new_definition)\n        if context[\"success\"]:\n            context[\"success-title\"] = \"\"\n        return render(request, \"term_request.html\", context)\n    else:\n        add_term(request)\n\n\ndef send_translate(request):\n    if request.method == \"POST\":\n        cache.clear()\n        user_name = request.POST.get(\"name\")\n        new_term = request.POST.get(\"new_term1\", \"\")\n        new_definition = request.POST.get(\"new_definition1\", \"\").replace(\";\", \",\")\n        context = {\"user\": user_name}\n        if len(new_definition) == 0:\n            context[\"success\"] = False\n            context[\"comment\"] = \"Описание должно быть не пустым\"\n        elif len(new_term) == 0:\n            context[\"success\"] = False\n            context[\"comment\"] = \"Термин должен быть не пустым\"\n        else:\n            context[\"success\"] = True\n            context[\"comment\"] = \"Ваш термин принят\"\n            terms_work.write_translate(new_term1, new_definition1)\n        if context[\"success\"]:\n            context[\"success-title\"] = \"\"\n        return render(request, \"term_request.html\", context)\n    else:\n        add_term(request)\n\n\ndef show_stats(request):\n    stats = terms_work.get_terms_stats()\n    return render(request, \"stats.html\", stats)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/proj_maths/views.py b/proj_maths/views.py
--- a/proj_maths/views.py	(revision 3b6dc7336814f0530c57aac85207c11c93fc3c1a)
+++ b/proj_maths/views.py	(date 1715284030682)
@@ -1,18 +1,18 @@
 from django.shortcuts import render
 from django.core.cache import cache
-from . import terms_work
+from proj_maths import terms_work
+
 
 from django.shortcuts import redirect
 
 
-
-def term_delete(request, term_id):
-    delete_term_from_csv(term_id)
+def term_delete(request, term):
+    updated_data = delete_term_from_csv(term)
+    if updated_data:
+        print(updated_data)
     return redirect('term_list')
 
 
-
-
 def index(request):
     return render(request, "index.html")
 
Index: templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base_page.html\" %}\n\n{% block page-title %}\nМатематика и её термины\n{% endblock %}\n\n{% block page-lead %}\nЭто страничка проекта про изучение математики. <br/>\nЭтот проект и его исходный код можно использовать как reference или источник вдохновения для своего проекта.\n{% endblock %}\n\n{% block content %}\n<div class=\"container px-4 py-5\" id=\"project-contents\">\n    <h2 class=\"pb-2 border-bottom\">Что есть в этом проекте</h2>\n    <div class=\"row g-4 py-5 row-cols-1 row-cols-lg-3\">\n        <div class=\"col d-flex\">\n            <div class=\"icon-square text-bg-light d-inline-flex align-items-center justify-content-center fs-4 flex-shrink-0 me-3\">\n                <svg class=\"bi\" width=\"1em\" height=\"1em\">\n                    <use xlink:href=\"#cpu-fill\"></use>\n                </svg>\n            </div>\n            <div>\n                <h3 class=\"fs-2\">Список терминов</h3>\n                <p>Простая страница с контентом, который разложен в таблицу. Содержимое таблицы находится в текстовом\n                    файле (если вы уверенно себя чувствуете, замените текстовый файл на базу данных).</p>\n                <a href=\"/terms-list\" class=\"btn btn-primary\">Посмотреть</a>\n            </div>\n        </div>\n        <div class=\"col d-flex\">\n            <div class=\"icon-square text-bg-light d-inline-flex align-items-center justify-content-center fs-4 flex-shrink-0 me-3\">\n                <svg class=\"bi\" width=\"1em\" height=\"1em\">\n                    <use xlink:href=\"#cpu-fill\"></use>\n                </svg>\n            </div>\n            <div>\n                <h3 class=\"fs-2\">Форма для заполнения термина</h3>\n                <p>Пример POST-запроса, который отправится после того, как вы заполните форму. Он допишет термин в ваш\n                    текстовый файл, и если всё будет успешно — вас перенаправят на страницу терминов</p>\n                <a href=\"/add-term\" class=\"btn btn-primary\">\n                    Заполнить\n                </a>\n            </div>\n        </div>\n         <div class=\"col d-flex\">\n            <div class=\"icon-square text-bg-light d-inline-flex align-items-center justify-content-center fs-4 flex-shrink-0 me-3\">\n                <svg class=\"bi\" width=\"1em\" height=\"1em\">\n                    <use xlink:href=\"#cpu-fill\"></use>\n                </svg>\n            </div>\n            <div>\n                <h3 class=\"fs-2\">Форма для ЭКСПЕРИМЕНТОВ\"</h3>\n                <p>Пример POST-запроса, который отправится после того, как вы заполните форму. Он допишет термин в ваш\n                    текстовый файл, и если всё будет успешно — вас перенаправят на страницу терминов</p>\n                <a href=\"/stats\" class=\"btn btn-primary\">\n                    Заполнить\n                </a>\n            </div>\n        </div>\n        <div class=\"col d-flex\">\n            <div class=\"icon-square text-bg-light d-inline-flex align-items-center justify-content-center fs-4 flex-shrink-0 me-3\">\n                <svg class=\"bi\" width=\"1em\" height=\"1em\">\n                    <use xlink:href=\"#cpu-fill\"></use>\n                </svg>\n            </div>\n            <div>\n                <h3 class=\"fs-2\">Статистика</h3>\n                <p>Сколько терминов уже есть? Какой они длины?</p>\n                <a href=\"/stats\" class=\"btn btn-primary\">\n                    Изучить\n                </a>\n            </div>\n        </div>\n    </div>\n    <h2 class=\"pb-2 border-bottom\">Что можете сделать вы?</h2>\n    <div class=\"row g-4 py-5 row-cols-1 row-cols-lg-2\">\n        <div class=\"col-lg-4\">\n            <h4 class=\"py-1\">Добавить ещё одну форму</h4>\n        </div>\n        <div class=\"col-lg-8\">\n            <p>Чтобы получить максимальную оценку по проекту, нужно две страницы, которые <span class=\"fst-italic\">показывают</span>\n            контент, а две страницы, которые <span class=\"fst-italic\">принимают</span> контент. Одна страница с\n            POST-запросом создана — это <a href=\"/add-term\">форма сбора терминов</a>. Добавьте ещё одну форму и view, обрабатывающий её!</p>\n        </div>\n    </div>\n    <div class=\"row g-4 py-5 row-cols-1 row-cols-lg-2\">\n        <div class=\"col-lg-4\">\n            <h4 class=\"py-1\">Разнообразить контент</h4>\n        </div>\n        <div class=\"col-lg-8\">\n            <p>Этот проект — про математику. В условии проекта в курсе — иностранные языки. Измените содержимое страниц,\n                чтобы они были полезны в контексте изучения иностранного языка (несколько примеров есть в описании проекта).</p>\n        </div>\n    </div>\n    <div class=\"row g-4 py-5 row-cols-1 row-cols-lg-2\">\n        <div class=\"col-lg-4\">\n            <h4 class=\"py-1\">Изменить вёрстку и/или дизайн-систему</h4>\n        </div>\n        <div class=\"col-lg-8\">\n            <p>Этот проект использует <a href=\"https://getbootstrap.com\">Bootstrap</a>. Попробуйте другие дизайн-системы, например:\n                <ul>\n                    <li><a href=\"https://materializecss.com\">Materialize</a></li>\n                    <li><a href=\"https://semantic-ui.com\">Semantic UI</a></li>\n                    <li><a href=\"https://get.foundation/templates.html\">Foundation</a></li>\n                </ul>\n            </p>\n            <p>\n                Если же вам хочется оставить Bootstrap — измените вёрстку! Добавьте картинок, замените стили — словом, пробудите\n                внутреннего художника.\n            </p>\n            <p>\n                <span class=\"fst-italic\">Вариант улучшения:</span> как правило, у сайта есть фавикон — маленькая иконка, отображающаяся\n                рядом с названием сайта во вкладке или окне браузера. Сейчас её нет — но вы можете её добавить.\n            </p>\n        </div>\n    </div>\n</div>\n{% endblock %}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/index.html b/templates/index.html
--- a/templates/index.html	(revision 3b6dc7336814f0530c57aac85207c11c93fc3c1a)
+++ b/templates/index.html	(date 1715280678524)
@@ -51,7 +51,7 @@
                 <h3 class="fs-2">Форма для ЭКСПЕРИМЕНТОВ"</h3>
                 <p>Пример POST-запроса, который отправится после того, как вы заполните форму. Он допишет термин в ваш
                     текстовый файл, и если всё будет успешно — вас перенаправят на страницу терминов</p>
-                <a href="/stats" class="btn btn-primary">
+                <a href="/delete/Uniform Resource Locator" class="btn btn-primary">
                     Заполнить
                 </a>
             </div>
Index: templates/term_list_deleted.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/term_list_deleted.html b/templates/term_list_deleted.html
new file mode 100644
--- /dev/null	(date 1715283492655)
+++ b/templates/term_list_deleted.html	(date 1715283492655)
@@ -0,0 +1,28 @@
+   {# term_list_deleted.html #}
+   <h1>Terms</h1>
+   <form method="post">
+       {% csrf_token %}
+       {{ form.as_p }}
+       <button type="submit">Save</button>
+   </form>
+   <table>
+       <thead>
+           <tr>
+               <th>term</th>
+               <th>explanation</th>
+               <th>Actions</th>
+           </tr>
+       </thead>
+       <tbody>
+           {% for term in terms %}
+           <tr>
+               <td>{{ term.term }}</td>
+               <td>{{ term.explanation }}</td>
+               <td>
+                   <a href="{% url 'term_delete' term.pk %}">Delete</a>
+               </td>
+           </tr>
+           {% endfor %}
+       </tbody>
+   </table>
+   
\ No newline at end of file
